import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'net.minecrell.licenser' version '0.4.1'
}

group = 'me.dkim19375'
version = '1.2.0'

final basePackage = 'me.dkim19375.esskitspreview.libs'

shadowJar {
    relocate 'kotlin', "${basePackage}.kotlin"
    relocate 'me.mattstudios.mfgui', "${basePackage}.mfgui"
    relocate 'me.dkim19375.dkimcore', "${basePackage}.dkimcore"
    relocate 'me.dkim19375.dkimbukkitcore', "${basePackage}.dkimbukkitcore"
}

repositories {
    addRepositories project
    mavenCentral()
}

dependencies {
    compileOnly 'net.kyori:adventure-api:4.9.3'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'net.essentialsx:EssentialsX:2.19.2'
    compileOnly 'org.spigotmc:spigot-api:1.18.1-R0.1-SNAPSHOT'
    compileOnly 'net.kyori:adventure-text-serializer-legacy:4.10.0'

    implementation 'dev.triumphteam:triumph-gui:3.1.2'
    implementation 'io.github.dkim19375:dkim-bukkit-core:3.3.32'
}

//noinspection GroovyAssignabilityCheck
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileKotlin {
    //noinspection GrUnresolvedAccess
    kotlinOptions.jvmTarget = '1.8'
}

license {
    header = rootProject.file("LICENSE")
    include "**/*.kt"
}

static def addRepositories(Project project) {
    project.repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
        maven { url = 'https://repo.alessiodp.com/releases/' }
        maven { url = 'https://repo.essentialsx.net/releases/' }
        maven { url = 'https://repo.essentialsx.net/snapshots/' }
        maven { url = 'https://repo.mattstudios.me/artifactory/public' }
        maven { url = 'https://repo.codemc.org/repository/maven-public/' }
        maven { url = 'https://repo.dmulloy2.net/nexus/repository/public/' }
        maven { url = 'https://repo.onarandombox.com/content/groups/public/' }
        maven { url = 'https://nexus.hc.to/content/repositories/pub_releases/' }
        maven { url = 'https://oss.sonatype.org/content/repositories/releases/' }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url = 'https://s01.oss.sonatype.org/content/repositories/releases/' }
        maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        flatDir {
            dirs 'libs'
        }
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        expand 'pluginVersion': version
    }
}

task removeBuildJars() {
    new File('build/libs').deleteDir()
}

final server = '1.18'
final servers = [
        "1.8",
        "1.16",
        "1.17",
        "1.18"
]

task copyFile() {
    doLast {
        final jar = shadowJar.archiveFile.get().asFile
        final File pluginFolder = new File(file(rootDir).path, "../.TestServers/${server}/plugins")
        if (pluginFolder.exists()) {
            final File file = new File(pluginFolder, shadowJar.archiveFileName.get())
            if (file.exists()) {
                file.delete()
            }
            Files.copy(jar.toPath(), file.toPath(), StandardCopyOption.REPLACE_EXISTING)
        }
    }
}

task deleteAll() {
    doLast {
        for (deleteServer in servers) {
            for (file in new File("../.TestServers/${deleteServer}/plugins").listFiles()) {
                if (file.name.startsWith(shadowJar.archiveBaseName.get())) {
                    file.delete()
                }
            }
        }
    }
}

wrapper.dependsOn licenseFormat